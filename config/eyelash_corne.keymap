#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        left_click {
            bindings = <&mkp MB1>;
            key-positions = <16 17>;
        };

        right_click {
            bindings = <&mkp MB2>;
            key-positions = <23 24>;
        };

        back {
            bindings = <&mkp MB4>;
            key-positions = <31 32>;
        };

        forw {
            bindings = <&mkp MB5>;
            key-positions = <36 37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R      &kp T                                      &mmv MOVE_UP                     &kp Y        &kp U       &kp I          &kp O    &kp P     &kp BSPC
&td0       &kp A  &kp S  &kp D     &kp F      &kp G                      &mmv MOVE_LEFT  &kp ENTER       &mmv MOVE_RIGHT  &kp H        &kp J       &kp K          &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V      &kp B        &kp ESCAPE                    &mmv MOVE_DOWN                   &kp N        &kp M       &kp COMMA      &kp DOT  &kp FSLH  &kp ESC
                         &kp LGUI  &lt 3 TAB  &lt 1 SPACE                                                                 &lt 2 ENTER  &kp LSHIFT  &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "spacefn";
            bindings = <
&trans  &kp Q     &kp W  &kp E      &kp R      &kp T                                    &mmv MOVE_UP                     &kp Y      &kp PG_UP  &kp UP     &kp O      &kp P     &kp BSPC
&trans  &kp LALT  &kp S  &kp LGUI   &kp ENTER  &kp G                    &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp PG_DN  &kp LEFT   &kp DOWN   &kp RIGHT  &kp BSPC  &kp SQT
&trans  &kp Z     &kp X  &kp C      &kp V      &kp SPACE  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp TAB    &kp GRAVE  &kp COMMA  &kp DOT    &trans    &kp PG_DN
                         &kp LCTRL  &kp LALT   &trans                                                                    &mo 3      &kp RCMD   &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "capsfn";
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp PERCENT  &kp T                                &mmv MOVE_UP                     &kp CARET      &kp LBKT              &kp RBKT               &kp MINUS  &kp F12    &kp GRAVE
&trans  &kp N4  &kp N5  &kp N6  &kp N0       &kp G                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI   &kp EQUAL  &kp SQT
&trans  &kp N7  &kp N8  &kp N9  &kp V        &kp B      &trans                    &mmv MOVE_DOWN                   &kp B          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BSLH   &kp PIPE   &kp FSLH
                        &trans  &mo 4        &kp SPACE                                                             &kp RET        &kp LSHFT             &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "mouse";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &msc SCRL_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &msc SCRL_LEFT  &mkp LCLK       &msc SCRL_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &msc SCRL_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            display-name = "bluetooth";
            bindings = <
&studio_unlock  &kp F1      &kp F2        &kp F3           &kp F4           &kp F5                                              &mmv MOVE_UP                     &kp F6           &kp F7           &kp F8           &kp F9      &kp F10          &kp F11
&trans          &trans      &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2     &rgb_ug RGB_ON                      &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &rgb_ug RGB_OFF  &bt BT_SEL 3     &bt BT_SEL 4     &bt BT_CLR  &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans        &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                    &mmv MOVE_DOWN                   &rgb_ug RGB_BRD  &rgb_ug RGB_EFR  &rgb_ug RGB_SPD  &sys_reset  &bootloader      &kp PAUSE_BREAK
                                          &trans           &trans           &trans                                                                               &trans           &trans           &trans
            >;

            sensor-bindings = <&rgb_encoder>;
        };
    };
};
